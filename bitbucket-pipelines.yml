# This is a sample build configuration for building and testing a Python backend and React frontend.
image: atlassian/default-image:3

definitions:
  caches:
    pip: ~/.cache/pip
    npm: ~/.npm

  steps:
    - step: &backend-test
        name: Backend - Build and Test
        caches:
          - pip
        script:
          - cd backend
          # Create and activate conda environment if needed
          - |
            if [ -f "environment.yml" ]; then
              wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
              bash miniconda.sh -b -p $HOME/miniconda
              export PATH="$HOME/miniconda/bin:$PATH"
              conda env create -f environment.yml
              source activate $(head -1 environment.yml | cut -d' ' -f2)
            fi
          # Install requirements
          - pip install -r requirements.txt
          # Install test dependencies
          - pip install pytest pytest-cov
          # Run tests with coverage
          - cd src
          - python -m pytest tests/ --cov=main --cov-report=xml --cov-report=term
          # Fail if coverage is below 90%
          - |
            coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
            if (( $(echo "$coverage < 90" | bc -l) )); then 
              echo "Coverage is below 90%. Current coverage: $coverage%"
              exit 1
            fi
        artifacts:
          - backend/src/coverage.xml
    
    - step: &backend-build
        name: Backend - Build
        caches:
          - pip
        script:
          - cd backend
          # Create and activate conda environment if needed
          - |
            if [ -f "environment.yml" ]; then
              wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
              bash miniconda.sh -b -p $HOME/miniconda
              export PATH="$HOME/miniconda/bin:$PATH"
              conda env create -f environment.yml
              source activate $(head -1 environment.yml | cut -d' ' -f2)
            fi
          # Install requirements
          - pip install -r requirements.txt
          # Build steps
          - echo "Building backend application for deployment..."
          # Package application for deployment
          - cd ..
          - tar -czf backend-deploy.tar.gz backend
        artifacts:
          - backend-deploy.tar.gz
    
    - step: &backend-deploy
        name: Backend - Deploy
        deployment: production
        script:
          # Unpack the backend archive
          - tar -xzf backend-deploy.tar.gz
          - cd backend
          - echo "Deploying backend application..."
          # Example deployment to a server using scp
          # - apt-get update && apt-get install -y sshpass
          # - sshpass -p $SERVER_PASSWORD scp -r . $SERVER_USER@$SERVER_HOST:/path/to/deployment
          # Example deployment using AWS Elastic Beanstalk
          # - pip install awsebcli
          # - eb deploy flight-management-production
        artifacts:
          - backend/src/deployment-log.txt
    
    - step: &frontend-test
        name: Frontend - Build
        caches:
          - npm
        script:
          - cd frontend/flights
          # Install dependencies
          - npm ci
          - echo "Skipping tests as they haven't been implemented yet"
          # When tests are implemented, uncomment the following line
          # - npm test
          # Check API connections
          - |
            echo "Checking API connections between frontend and backend..."
            # Look for API endpoint references in the source code
            api_endpoints=$(grep -r "fetch(" src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" | grep -o "'/api/[^']*'" | sort -u || echo "No endpoints found")
            
            if [ -z "$api_endpoints" ]; then
              echo "Warning: No API endpoints found in frontend code."
            else
              echo "Found API endpoints in frontend code:"
              echo "$api_endpoints"
              
              # Verify endpoints exist in backend
              echo "Verifying endpoints exist in backend..."
              cd ../../backend/src
              for endpoint in $api_endpoints; do
                # Remove quotes and extract endpoint path
                endpoint=$(echo $endpoint | tr -d "'")
                if grep -r "$endpoint" main/resources --include="*.py" > /dev/null; then
                  echo "✅ Endpoint $endpoint found in backend"
                else
                  echo "⚠️ Warning: Endpoint $endpoint not found in backend"
                  # Note: Not failing the build on missing endpoints, just warning
                fi
              done
            fi
          # Return to frontend directory and build project
          - cd ../../frontend/flights
          - npm run build
          # Package for deployment
          - cd ..
          - tar -czf flights-build.tar.gz flights/build
        artifacts:
          - frontend/flights-build.tar.gz
    
    - step: &frontend-deploy
        name: Frontend - Deploy
        deployment: production
        script:
          # Unpack the frontend build
          - cd frontend
          - tar -xzf flights-build.tar.gz
          - echo "Deploying frontend application to production environment..."
          # Example deployment to S3
          # - pip install awscli
          # - aws s3 sync flights/build/ s3://your-bucket-name/ --delete
          # Example deployment to a web server
          # - apt-get update && apt-get install -y sshpass
          # - sshpass -p $FRONTEND_SERVER_PASSWORD scp -r flights/build/* $FRONTEND_SERVER_USER@$FRONTEND_SERVER_HOST:/var/www/html/
          - echo "Frontend deployment completed" > deployment-log.txt
        artifacts:
          - frontend/deployment-log.txt

pipelines:
  pull-requests:
    '**':
      - parallel:
          - step: *backend-test
          - step: *frontend-test
  
  branches:
    main:
      - parallel:
          - step: *backend-test
          - step: *frontend-test
      - step: *backend-build
      - step: *backend-deploy
      - step: *frontend-deploy
  
  custom:
    manual-frontend-deploy:
      - step: *frontend-test
      - step: *frontend-deploy
    
    manual-full-deploy:
      - parallel:
          - step: *backend-test
          - step: *frontend-test
      - step: *backend-build
      - step: *backend-deploy
      - step: *frontend-deploy
  
  schedules:
    - cron: '0 0 * * *'  # Daily at midnight
      name: "Daily Build and Deploy"
      branches:
        include:
          - main
      pipeline:
        - parallel:
            - step: *backend-test
            - step: *frontend-test
        - step: *backend-build
        - step: *backend-deploy
        - step: *frontend-deploy