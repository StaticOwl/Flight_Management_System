image: atlassian/default-image:3

definitions:
  caches:
    pip: ~/.cache/pip
    npm: ~/.npm

  steps:
    - step: &backend-setup-and-test
        name: Backend - Setup & Test
        caches:
          - pip
        script:
          - cd backend
          - wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O miniforge.sh
          - bash miniforge.sh -b -p $HOME/miniforge
          - export PATH="$HOME/miniforge/bin:$PATH"
          - conda env create -f environment.yml
          - source "$HOME/miniforge/bin/activate" "$(head -1 environment.yml | cut -d' ' -f2)"
          - cd src
          - python -m pytest tests/ --cov=main --cov-report=xml --cov-report=term
          - |
            coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
            if (( $(echo "$coverage < 90" | bc -l) )); then 
              echo "Coverage is below 90%. Current coverage: $coverage%"
              exit 1
            fi
        artifacts:
          - backend/**

    - step: &backend-deploy
        name: Backend - Deploy
        deployment: be-production
        caches:
          - pip
        script:
          - echo "Deploying backend using pre-tested artifact..."
          - tar -czf backend-deploy.tar.gz backend
          - echo "Backend deployment complete."
        artifacts:
          - backend-deploy.tar.gz

    - step: &frontend-setup-and-test
        name: Frontend - Setup & Test
        caches:
          - npm
        script:
          - cd frontend
          - npm install
          - npm install --save-dev @babel/plugin-proposal-private-property-in-object
          - echo "Skipping tests as they haven't been implemented yet"
        artifacts:
          - frontend/**

    - step: &frontend-deploy
        name: Frontend - Build & Deploy
        deployment: fe-production
        caches:
          - npm
        script:
          - cd frontend
          - CI=false npm run build
          - tar -czf frontend-build.tar.gz build
          - echo "Frontend deployment completed."
        artifacts:
          - frontend/frontend-build.tar.gz

pipelines:
#  pull-requests:
#    '**':
#      - parallel:
#          - step: *backend-setup-and-test
#          - step: *frontend-setup-and-test

  branches:
    main:
      - parallel:
          - step: *backend-setup-and-test
          - step: *frontend-setup-and-test
      - parallel:
          - step: *backend-deploy
          - step: *frontend-deploy

  custom:
    manual-full-deploy:
      - parallel:
          - step: *backend-setup-and-test
          - step: *frontend-setup-and-test
      - parallel:
          - step: *backend-deploy
          - step: *frontend-deploy

    manual-frontend-deploy:
      - step: *frontend-setup-and-test
      - step: *frontend-deploy
